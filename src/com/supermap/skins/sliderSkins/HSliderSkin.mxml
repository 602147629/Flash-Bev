<?xml version="1.0" encoding="utf-8"?>
<!--
/////////////////////////////////////////////////////////////////////////////////////////////
//
//	Copyright (c) 2013 SuperMap. All Rights Reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an  "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
//
///////////////////////////////////////////////////////////////////////////////////////////// 
-->

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.
-->

<!--- The default skin class for the Spark HSlider component. The thumb and track skins are defined by the
HSliderThumbSkin and HSliderTrackSkin classes, respectively.  

@see spark.components.HSlider
@see spark.skins.spark.HSliderThumbSkin
@see spark.skins.spark.HSliderTrackSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minHeight="11" alpha.disabled="0.5">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.HSlider")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		import mx.events.FlexEvent;
		/* Define the skin elements that should not be colorized. 
		For slider, the skin itself is colorized but the individual parts are not. */
		static private const exclusions:Array = ["track", "thumb"];
		
		[Bindable]
		private var _valueWidth:Number = 0;
		
		/**
		 * @private
		 */  
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
			//this.hostComponent.addEventListener(FlexEvent.VALUE_COMMIT, valuechanged);
		}
		
		private function valuechanged(event:FlexEvent):void
		{
			this._valueWidth = (this.hostComponent.value - this.hostComponent.minimum )/(this.hostComponent.maximum - this.hostComponent.minimum)*(this.hostComponent.width);
		}
	</fx:Script>
	
	<fx:Script>
		/**
		 *  @private
		 */  
		override protected function measure() : void
		{
			// Temporarily move the thumb to the left of the Slider so measurement
			// doesn't factor in its x position. This allows resizing the
			// HSlider to less than 100px in width. 
			var thumbPos:Number = thumb.getLayoutBoundsX();
			thumb.setLayoutBoundsPosition(0, thumb.getLayoutBoundsY());
			super.measure();
			thumb.setLayoutBoundsPosition(thumbPos, thumb.getLayoutBoundsY());
		}
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
	</s:states>
	
	<fx:Declarations>
		<!--- The tooltip used in the mx.controls.Slider control. 
		To customize the DataTip's appearance, create a custom HSliderSkin class.-->
		<fx:Component id="dataTip">     
			<s:DataRenderer minHeight="24" minWidth="35" y="22">
				<s:Path left="0" right="0" data="M 2 4 C 2 4 0 4 0 6 C 0 6 0 22 0 22 C 0 22 0 24 2 24 C 2 24 33 24 33 24 C 33 24 35 24 35 22 C 35 22 35 6 35 6 C 35 6 35 4 33 4 C 33 4 23 4 23 4 L 17.5 0 L 13 4 C 13 4 2 4 2 4 Z">
					<s:fill>
						<s:SolidColor color="0" alpha="0.7"/>
					</s:fill>
					<s:filters>
						<!--<s:DropShadowFilter angle="90" color="0xffffff" distance="1"/>-->
						<s:GlowFilter color="0xffffff" blurX="2" blurY="2" strength="2"/>
					</s:filters>
				</s:Path>
				
				<s:Label id="labelDisplay" text="{data}"
						 horizontalCenter="0" verticalCenter="1"
						 left="5" right="5" top="7" bottom="5"
						 textAlign="center" verticalAlign="middle"
						 fontWeight="normal" color="white" fontSize="11">
				</s:Label>
			</s:DataRenderer>
		</fx:Component>
	</fx:Declarations>
	
	<!--- The default skin class is HSliderTrackSkin. 
	@copy spark.components.supportClasses.TrackBase#track
	@see spark.skins.spark.HSliderTrackSkin -->
	<s:Button id="track" left="0" right="0" top="0" bottom="0" minWidth="33" width="100"
			  skinClass="com.supermap.skins.sliderSkins.MyTrackSkin"/>
	<s:Rect id="trackValue" left="0" 
			width="{this.hostComponent.value/(this.hostComponent.maximum - this.hostComponent.minimum)*(this.hostComponent.width)}" top="0" bottom="0" topLeftRadiusX="6" topLeftRadiusY="6"
			bottomLeftRadiusX="6" bottomLeftRadiusY="6">
		<s:fill>
			<s:LinearGradient rotation="270">
				<s:GradientEntry  color="#116AA6"/>
				<s:GradientEntry  color="#116AA6"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	
	<!--- The default skin class is HSliderThumbSkin.
	@copy spark.components.supportClasses.TrackBase#thumb 
	@see spark.skins.spark.HSliderThumbSkin -->
	<s:Button id="thumb" top="-3" bottom="-6" width="10" height="17" 
			  skinClass="com.supermap.skins.sliderSkins.MyThumbSkin" />
</s:SparkSkin>