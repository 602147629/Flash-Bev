<?xml version="1.0" encoding="utf-8"?>
<!--
/////////////////////////////////////////////////////////////////////////////////////////////
//
//	Copyright (c) 2013 SuperMap. All Rights Reserved.
//
//	Licensed under the Apache License, Version 2.0 (the "License");
//	you may not use this file except in compliance with the License.
//	You may obtain a copy of the License at
//
//	http://www.apache.org/licenses/LICENSE-2.0
//
//	Unless required by applicable law or agreed to in writing, software
//	distributed under the License is distributed on an  "AS IS" BASIS,
//	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//	See the License for the specific language governing permissions and
//	limitations under the License.
//
///////////////////////////////////////////////////////////////////////////////////////////// 
-->

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark TitleWindow container.  

@see spark.skins.spark.TitleWindowCloseButtonSkin
@see spark.components.TitleWindow

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" blendMode="normal" mouseEnabled="false"
			 minWidth="76" minHeight="76" alpha.disabled="0.5" alpha.disabledWithControlBar="0.5" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("com.supermap.framework.dock.FloatPanel")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized. 
		For panel, border and title background are skinned, but the content area and title text are not. */
		static private const exclusions:Array = ["background", "titleDisplay", "contentGroup"];
		
		/**
		 * @private
		 */  
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			if (getStyle("borderVisible") == true)
			{
				border.visible = true;
				background.left = background.top = background.right = background.bottom = 1;
				contents.left = contents.top = contents.right = contents.bottom = 1;
			}
			else
			{
				border.visible = false;
				background.left = background.top = background.right = background.bottom = 0;
				contents.left = contents.top = contents.right = contents.bottom = 0;
			}
			
			dropShadow.visible = getStyle("dropShadowVisible");
			
			var cr:Number = getStyle("cornerRadius");
			var withControls:Boolean = 
				(currentState == "disabledWithControlBar" || 
					currentState == "normalWithControlBar" ||
					currentState == "inactiveWithControlBar");
			
			if (cornerRadius != cr)
			{
				cornerRadius = cr;
				
				dropShadow.tlRadius = cornerRadius;
				dropShadow.trRadius = cornerRadius;
				dropShadow.blRadius = withControls ? cornerRadius : 0;
				dropShadow.brRadius = withControls ? cornerRadius : 0;
				
				setPartCornerRadii(topMaskRect, withControls); 
				setPartCornerRadii(border, withControls); 
				setPartCornerRadii(background, withControls);
			}
			
			if (bottomMaskRect) setPartCornerRadii(bottomMaskRect, withControls); 
			
			borderStroke.color = getStyle("borderColor");
			borderStroke.alpha = getStyle("borderAlpha");
			backgroundFill.color = getStyle("backgroundColor");
			backgroundFill.alpha = getStyle("backgroundAlpha");
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		/**
		 * @private
		 */  
		private function setPartCornerRadii(target:Rect, includeBottom:Boolean):void
		{            
			target.topLeftRadiusX = cornerRadius;
			target.topRightRadiusX = cornerRadius;
			target.bottomLeftRadiusX = includeBottom ? cornerRadius : 0;
			target.bottomRightRadiusX = includeBottom ? cornerRadius : 0;
		}
		
		private var cornerRadius:Number;
		
		import mx.events.EffectEvent;
		protected function sequence1_effectEndHandler(event:EffectEvent):void
		{
			this.hostComponent.showDockBarHandler();
		}
		
		
	</fx:Script>
	
	<s:states>
		<s:State name="normal" />
		<s:State name="inactive" stateGroups="inactiveGroup" />
		<s:State name="disabled" />
		<s:State name="normalWithControlBar" stateGroups="withControls" />
		<s:State name="inactiveWithControlBar" stateGroups="withControls, inactiveGroup" />
		<s:State name="disabledWithControlBar" stateGroups="withControls" />
		<!-- Custom-->
		<s:State name="open"/>
		<s:State name="minimized"/>
		<s:State name="closed"/>
		<s:State name="dock"/>
	</s:states>
	
	
	<s:transitions>		
		<s:Transition fromState="dock" toState="open">	
			<s:Sequence effectEnd="sequence1_effectEndHandler(event)">
				<s:Parallel>
					<s:Fade alphaTo="0.32" target="{dropShadow}"/>
					<s:Fade alphaTo="1" target="{total}"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		
		<s:Transition fromState="*" toState="dock">	
			<s:Sequence effectEnd="sequence1_effectEndHandler(event)">
				<s:Parallel>
					<s:Fade alphaTo="0" target="{dropShadow}"/>
					<s:Fade alphaTo="0" target="{total}"/>
				</s:Parallel>
			</s:Sequence>
		</s:Transition>
		
	</s:transitions>
	
	
	
	<!--- drop shadow can't be hittable so it stays sibling of other graphics @private-->
	<s:RectangularDropShadow id="dropShadow" blurX="20" blurY="20" alpha="0.32" visible.dock = "false"
							 alpha.inactiveGroup="0.22" distance="11"  distance.inactiveGroup="7"
							 angle="90" color="0xffffff" left="0" top="0" right="0" bottom="0"/>
	
	
	
	<s:VGroup id="dockbar" visible.dock="true" includeIn="dock" gap="3" >
		
	</s:VGroup>
	
	<!--- drop shadow can't be hittable so all other graphics go in this group -->
	<s:Group id="total" left="0" right="0" top="0" bottom="0" visible.dock = "false">
		<!--- top group mask @private-->
		<s:Group left="1" top="1" right="1" bottom="1" id="topGroupMask">
			<!--- @private-->
			<s:Rect id="topMaskRect" left="0" top="0" right="0" bottom="0">
				<s:fill>
					<s:SolidColor alpha="0"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		
		<!--- bottom group mask @private-->
		<s:Group left="1" top="1" right="1" bottom="1" id="bottomGroupMask" 
				 includeIn="withControls">
			<!--- @private-->
			<s:Rect id="bottomMaskRect" left="0" top="0" right="0" bottom="0">
				<s:fill>
					<s:SolidColor alpha="0"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		
		<!--- layer 1: border @private -->
		<s:Rect id="border" left="0" right="0" top="0" bottom="0" >
			<s:stroke>
				<!--- Defines the TitleWindowSkin class's border stroke. The default value is 1. -->
				<s:SolidColorStroke id="borderStroke" weight="1" />
			</s:stroke>
		</s:Rect>	
		
		<s:Group left="0" top="0" right="0" bottom="0" alpha="0.7" >
			<s:filters>
				<s:DropShadowFilter alpha="0.75" angle="0" blurX="6" blurY="6" distance="0" quality="3"/>
			</s:filters>
			<s:Rect id="background" width="100%" height="100%" >
				<s:fill>
					<s:SolidColor id="backgroundFill" color="#0c94d2"/>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke color="#0678ce"/>
				</s:stroke>
			</s:Rect>
		</s:Group>		
		
		<s:Group id="moveArea2" left="10" top="10" right="10" height="23">
			<s:Rect ><!--width="254" height="303" -->
				<s:fill>
					<s:SolidColor color="#0678ce"/>
				</s:fill>
			</s:Rect>
			<s:Rect  >
				<s:fill>
					<s:SolidColor color="#ffffff"/>
				</s:fill>
			</s:Rect>
			<s:Group width="100%" height="100%">
				<s:Rect width="100%" height="100%">
					<s:fill>
						<s:LinearGradient  scaleX="21.7446" rotation="90">
							<s:GradientEntry color="{getStyle('titleBarUpColor')}" ratio="0"/>
							<s:GradientEntry color="{getStyle('titleBarDownColor')}" ratio="1"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
			</s:Group>
			
			<s:Group id="headerTitleBar"
					 left="5" top="8" right="10" height="23"
					 alpha.closed="0"
					 includeInLayout.minimized="true"
					 visible.minimized="true"
					 visible.open="false">
				<s:layout>
					<s:HorizontalLayout paddingLeft="10"/>
				</s:layout>
			</s:Group>
			
			<!--<s:BitmapImage x="179.175" y="17.8945" scaleX="0.999875" scaleY="0.999875" width="12" height="12" source="@Embed('images/01.png')" />
			<s:BitmapImage x="199.175" y="17.8945" scaleX="0.999875" scaleY="0.999875" width="12" height="12" source="@Embed('images/02.png')" />
			<s:BitmapImage x="218.842" y="17.8955" scaleX="0.999875" scaleY="0.999875" width="12" height="12" source="@Embed('images/03.png')"/>-->
		</s:Group>
		
		<!-- layer 3: contents -->
		<!--- Contains the vertical stack of title bar content and control bar. -->
		<s:Group left="1" right="1" top="1" bottom="1" id="contents">
			<s:layout>
				<s:VerticalLayout gap="0" horizontalAlign="justify" paddingLeft="8" paddingBottom="8" paddingRight="8"/>
			</s:layout>
			<!--- @private -->
			<s:Group id="topGroup" mask="{topGroupMask}">
				
				<!--- layer 0: title bar fill @private -->
				<s:Rect id="tbFill" left="0" right="0" top="0" bottom="1">
					<!--<s:fill>
					<s:LinearGradient rotation="90">
					<s:GradientEntry color="0xD2D2D2"
					color.inactiveGroup="0xEAEAEA"/>
					<s:GradientEntry color="0x9A9A9A"
					color.inactiveGroup="0xCECECE"/>
					</s:LinearGradient>
					</s:fill>-->
				</s:Rect>
				
				<!--- layer 1: title bar highlight @private -->
				<s:Rect id="tbHilite" left="0" right="0" top="0" bottom="0">
					<s:stroke>
						<s:LinearGradientStroke rotation="90" weight="1">
							<s:GradientEntry color="0xE6E6E6" />
							<s:GradientEntry color="0xFFFFFF" alpha="0"/>
						</s:LinearGradientStroke>
					</s:stroke>
					<s:fill>
						<s:LinearGradient rotation="90">
							<s:GradientEntry color="0xFFFFFF" alpha="0.15" />
							<s:GradientEntry color="0xFFFFFF" alpha="0.15" ratio="0.44"/>
							<s:GradientEntry color="0xFFFFFF" alpha="0" ratio="0.4401"/>
						</s:LinearGradient>
					</s:fill>
				</s:Rect>
				
				<!--- layer 2: title bar divider @private -->
				<s:Rect id="tbDiv" left="0" right="0" height="1" bottom="0">
					<s:fill>
						<s:SolidColor color="0x000000" alpha="0" />
					</s:fill>
				</s:Rect>
				
				<!--title image-->
				<mx:Image id="titleImg" source="assets/images/default.png" left="5"  top="1" bottom="0" />
				
				<!-- layer 3: text -->
				<!--- @copy spark.components.Panel#titleDisplay -->
				<s:Label id="titleDisplay" maxDisplayedLines="1" color="0xffffff"
						 left="50" right="36" top="5" bottom="0" minHeight="30"
						 verticalAlign="middle" fontWeight="bold" />
				
				<!-- layer 4: moveArea -->
				<!--- @copy spark.components.TitleWindow#moveArea -->
				<s:Group id="moveArea" left="0" right="0" top="0" bottom="0" />
				
				
				<s:HGroup id="btnBar" right="15" gap="2" top="10" height="20">
					<!--停靠-->
					<s:Button id="dockButton" skinClass="com.supermap.framework.skins.dockButtonSkin"
							  />
					<!--最小化-->
					<!--<s:Button id="minButton" skinClass="com.supermap.framework.skins.minButtonSkin"
							  />-->
					<!--- @copy spark.components.TitleWindow#closeButton -->
					<!--关闭-->
					<s:Button id="closeButton" skinClass="com.supermap.framework.skins.closeButtonSkin"
							  />
					
				</s:HGroup>
			</s:Group>
			
			<!--
			Note: setting the minimum size to 0 here so that changes to the host component's
			size will not be thwarted by this skin part's minimum size.   This is a compromise,
			more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
			-->
			<!--- @copy spark.components.SkinnableContainer#contentGroup -->
			<s:Group id="contentGroup" width="100%" height="100%" minWidth="0" minHeight="0">
			</s:Group>
			
			<!--- @private -->
			<s:Group id="bottomGroup" minWidth="0" minHeight="0" 
					 includeIn="withControls">  
				
				<s:Group left="0" right="0" top="0" bottom="0" mask="{bottomGroupMask}">
					
					<!-- layer 0: control bar divider line -->
					<s:Rect left="0" right="0" top="0" height="1" alpha="0.22">
						<s:fill>
							<s:SolidColor color="0x000000" />
						</s:fill>
					</s:Rect>
					
					<!-- layer 1: control bar highlight -->
					<s:Rect left="0" right="0" top="1" bottom="0">
						<s:stroke>
							<s:LinearGradientStroke rotation="90" weight="1">
								<s:GradientEntry color="0xFFFFFF" />
								<s:GradientEntry color="0xD8D8D8" />
							</s:LinearGradientStroke>
						</s:stroke>
					</s:Rect>
					
					<!-- layer 2: control bar fill -->
					<s:Rect left="1" right="1" top="2" bottom="1">
						<s:fill>
							<s:LinearGradient rotation="90">
								<s:GradientEntry color="0xEDEDED"/>
								<s:GradientEntry color="0xCDCDCD"/>
							</s:LinearGradient>
						</s:fill>
					</s:Rect>
				</s:Group>
				
				<!--- @copy spark.components.Panel#controlBarGroup -->
				<s:Group id="controlBarGroup" left="0" right="0" top="1" bottom="1" minWidth="0" minHeight="0">
					<s:layout>
						<s:HorizontalLayout paddingLeft="10" paddingRight="10" paddingTop="7" paddingBottom="7" gap="10" />
					</s:layout>
				</s:Group>
			</s:Group>
			
		</s:Group>
		<mx:Image id="resize" source="@Embed('assets/images/resize.png')" right="0" bottom="0"/>
	</s:Group>
</s:SparkSkin>
